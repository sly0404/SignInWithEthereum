/// <reference types="node" />
export declare type EIP712Message = {
    domain: EIP712MessageDomain;
    types: EIP712MessageTypes;
    primaryType: string;
    message: Record<string, unknown>;
};
export declare type EIP712MessageDomain = Partial<{
    name: string;
    chainId: number;
    version: string;
    verifyingContract: string;
    salt: string;
}>;
export declare type EIP712MessageTypesEntry = {
    name: string;
    type: string;
};
export declare type EIP712MessageTypes = {
    EIP712Domain: EIP712MessageTypesEntry[];
    [key: string]: EIP712MessageTypesEntry[];
};
export declare type StructDefData = Required<{
    structType: "name";
    value: string;
} | {
    structType: "field";
    value: Buffer;
}>;
export declare type StructImplemData = Required<{
    structType: "root";
    value: string;
} | {
    structType: "array";
    value: number;
} | {
    structType: "field";
    value: Required<{
        data: unknown;
        type: string;
        sizeInBits: number | undefined;
    }>;
}>;
export declare type MessageFilters = {
    contractName: {
        label: string;
        signature: string;
    };
    fields: {
        label: string;
        path: string;
        signature: string;
    }[];
};
export declare type FilteringInfoShowField = {
    displayName: string;
    sig: string;
    filtersCount?: never;
};
export declare type FilteringInfoContractName = {
    displayName: string;
    sig: string;
    filtersCount: number;
};
//# sourceMappingURL=EIP712.types.d.ts.map